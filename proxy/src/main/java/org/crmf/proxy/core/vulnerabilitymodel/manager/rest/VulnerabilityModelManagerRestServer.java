/* --------------------------------------------------------------------------------------------------------------------
// Copyright file="VulnerabilityModelManagerRestServer.java"
//  © Copyright European Space Agency, 2018-2020
//
//  Author: Software developed by RHEA System S.A.
// 
//  This file is subject to the terms and conditions defined in file 'LICENSE.txt', which is part of this source code package. 
//  No part of the package, including this file, may be copied, modified, propagated, or distributed 
//  except according to the terms contained in the file ‘LICENSE.txt’.
// --------------------------------------------------------------------------------------------------------------------
*/

package org.crmf.proxy.core.vulnerabilitymodel.manager.rest;

import org.crmf.core.vulnerabilitymodel.manager.VulnerabilityModelManagerInput;
import org.crmf.model.exception.RemoteComponentException;
import org.crmf.model.riskassessment.VulnerabilityModel;
import org.crmf.model.riskassessmentelements.Vulnerability;
import org.crmf.model.utility.GenericFilter;
import org.crmf.model.utility.GenericFilterEnum;
import org.crmf.model.utility.ModelObject;
import org.crmf.model.utility.vulnerabilitymodel.VulnerabilityModelSerializerDeserializer;
import org.crmf.proxy.authnauthz.Permission;
import org.crmf.proxy.configuration.ApiExceptionEnum;
import org.crmf.proxy.configuration.ResponseMessage;
import org.crmf.riskmodel.manager.RiskModelManagerInput;
import org.crmf.vulnerabilityimport.vulnerabilityimportmanager.VulnerabilityImportManagerInput;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

//This class manages the business logic behind the webservices related to the VulnerabilityModel management
@RestController
@RequestMapping(value = "api/vulnerability")
public class VulnerabilityModelManagerRestServer {
  private static final Logger LOG = LoggerFactory.getLogger(VulnerabilityModelManagerRestServer.class.getName());
  public static final String DD_MM_YYYY_HH_MM = "dd/MM/yyyy HH:mm";
  @Autowired
  private VulnerabilityModelManagerInput vulnerabilityModelInput;
  @Autowired
  private VulnerabilityImportManagerInput vulnerabilityImportInput;
  @Autowired
  private RiskModelManagerInput riskModelInput;

  @PostMapping("vulnerabilityModel/edit")
  @Permission("VulnerabilityModel:Update")
  public void editVulnerabilityModel(@RequestParam(name = "SHIRO_SECURITY_TOKEN") String token,
                                     @RequestBody ModelObject vulnerabilityModelObject) {
    LOG.info("VulnerabilityModelManagerRestServer editVulnerabilityModel:: begin");
    try {
      //retrieve the vulnerabilityModel in json format
      String vulnModelJson = vulnerabilityModelObject.getJsonModel();

      LOG.info("VulnerabilityModelManagerRestServer editVulnerabilityModel:: vulnModelJson = " + vulnModelJson.substring(0, (vulnModelJson.length() > 1000 ? 1000 : vulnModelJson.length())));
      //retrieve the vulnerabilityModel model identifier
      String identifier = vulnerabilityModelObject.getObjectIdentifier();
      LOG.info("VulnerabilityModelManagerRestServer editVulnerabilityModel:: identifier = " + identifier);

      //VulnerabilityModel data validation and updateQuestionnaireJSON time
      VulnerabilityModelSerializerDeserializer vmsd = new VulnerabilityModelSerializerDeserializer();
      VulnerabilityModel vm = vmsd.getVMFromJSONString(vulnModelJson);
      LOG.info("VulnerabilityModelManagerRestServer editVulnerabilityModel:: vulnModelJson = " + vm.getVulnerabilities().size());
      DateFormat df = new SimpleDateFormat(DD_MM_YYYY_HH_MM);
      Date now = new Date();
      vm.setUpdateTime(df.format(now));
      vulnModelJson = vmsd.getJSONStringFromVM(vm);

      // updateQuestionnaireJSON the vulnerability model
      vulnerabilityModelInput.editVulnerabilityModel(vulnModelJson, identifier);
    } catch (Exception e) {
      LOG.error("VulnerabilityModelManagerRestServer editVulnerabilityModel " + e.getMessage());
      throw new RemoteComponentException(ApiExceptionEnum.COMMAND_EXCEPTION, e);
    }
  }

  @PostMapping("vulnerabilityModel/load")
  @Permission("VulnerabilityModel:Read")
  public ModelObject loadVulnerabilityModel(@RequestParam(name = "SHIRO_SECURITY_TOKEN") String token,
                                            @RequestBody GenericFilter filter) {
    LOG.info("VulnerabilityModelManagerRestServer loadVulnerabilityModel:: begin");
    try {
      //return the vulnerability model in json format that matches the filters in input
      return vulnerabilityModelInput.loadVulnerabilityModel(filter);
    } catch (Exception e) {
      LOG.error("VulnerabilityModelManagerRestServer loadVulnerabilityModel " + e.getMessage());
      throw new RemoteComponentException(ApiExceptionEnum.COMMAND_EXCEPTION, e);
    }
  }

  @PostMapping("vulnerabilityRepository/load")
  @Permission("VulnerabilityModel:Read")
  public String loadVulnerabilityRepository(@RequestParam(name = "SHIRO_SECURITY_TOKEN") String token,
                                            @RequestBody GenericFilter filter) {
    LOG.info("VulnerabilityModelManagerRestServer loadVulnerabilityRepository:: begin");
    LOG.info("loadVulnerabilityRepository " + filter.getFilterValue(GenericFilterEnum.FULL));

    try {
      //return the vulnerability model in json format that matches the filters in input
      String result = vulnerabilityModelInput.loadVulnerabilityRepository(filter);
      return result;
    } catch (Exception e) {
      LOG.error("VulnerabilityModelManagerRestServer loadVulnerabilityRepository " + e.getMessage());
      throw new RemoteComponentException(ApiExceptionEnum.COMMAND_EXCEPTION, e);
    }
  }

  @PostMapping("vulnerabilityReference/create")
  @Permission("Taxonomy:Update")
  public ResponseMessage createVulnerabilityReference(@RequestParam(name = "SHIRO_SECURITY_TOKEN") String token,
                                                      @RequestBody Vulnerability vulnerability) {

    try {
      String vulnerabilityIdentifier = vulnerabilityModelInput.createVulnerability(vulnerability);
      return new ResponseMessage(vulnerabilityIdentifier);
    } catch (Exception e) {
      LOG.error("VulnerabilityModelManagerRestServer createVulnerabilityRepository " + e.getMessage());
      throw new RemoteComponentException(ApiExceptionEnum.COMMAND_EXCEPTION, e);
    }
  }

  @PostMapping("vulnerabilityReference/edit")
  @Permission("Taxonomy:Update")
  public void editVulnerabilityReference(@RequestParam(name = "SHIRO_SECURITY_TOKEN") String token,
                                         @RequestBody Vulnerability vulnerability) {
    try {
      vulnerabilityModelInput.editVulnerability(vulnerability);
    } catch (Exception e) {
      LOG.error("VulnerabilityModelManagerRestServer updateVulnerabilityRepository " + e.getMessage());
      throw new RemoteComponentException(ApiExceptionEnum.COMMAND_EXCEPTION, e);
    }
  }

  @PostMapping("vulnerabilityReference/delete")
  @Permission("Taxonomy:Update")
  public void deleteVulnerabilityReference(@RequestParam(name = "SHIRO_SECURITY_TOKEN") String token,
                                           @RequestBody List<String> identifier) {
    try {
      vulnerabilityModelInput.deleteVulnerability(identifier);
    } catch (Exception e) {
      LOG.error("VulnerabilityModelManagerRestServer deleteVulnerabilityRepository " + e.getMessage());
      throw new RemoteComponentException(ApiExceptionEnum.COMMAND_EXCEPTION, e);
    }
  }
}
