/* --------------------------------------------------------------------------------------------------------------------
// Copyright file="VulnerabilityModelManagerRestServer.java"
//  © Copyright European Space Agency, 2018-2020
//
//  Author: Software developed by RHEA System S.A.
// 
//  This file is subject to the terms and conditions defined in file 'LICENSE.txt', which is part of this source code package. 
//  No part of the package, including this file, may be copied, modified, propagated, or distributed 
//  except according to the terms contained in the file ‘LICENSE.txt’.
// --------------------------------------------------------------------------------------------------------------------
*/

package org.crmf.proxy.core.vulnerabilitymodel.manager.rest;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.crmf.core.vulnerabilitymodel.manager.VulnerabilityModelManagerInputInterface;
import org.crmf.model.riskassessment.VulnerabilityModel;
import org.crmf.model.riskassessmentelements.RiskScenarioReference;
import org.crmf.model.riskassessmentelements.Vulnerability;
import org.crmf.model.riskassessmentelements.VulnerabilitySourceEnum;
import org.crmf.model.utility.GenericFilter;
import org.crmf.model.utility.GenericFilterEnum;
import org.crmf.model.utility.ModelObject;
import org.crmf.model.utility.vulnerabilitymodel.VulnerabilityModelSerializerDeserializer;
import org.crmf.riskmodel.manager.RiskModelManagerInputInterface;
import org.crmf.vulnerabilityimport.vulnerabilityimportmanager.VulnerabilityImportManagerInputInterface;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.ws.rs.Consumes;
import javax.ws.rs.POST;

//This class manages the business logic behind the webservices related to the VulnerabilityModel management
public class VulnerabilityModelManagerRestServer implements VulnerabilityModelManagerRestServerInterface {
  private static final Logger LOG = LoggerFactory.getLogger(VulnerabilityModelManagerRestServer.class.getName());
  private VulnerabilityModelManagerInputInterface vulnerabilityModelInput;
  private VulnerabilityImportManagerInputInterface vulnerabilityImportInput;
  private RiskModelManagerInputInterface riskModelInput;

  @Override
  public void editVulnerabilityModel(ModelObject vulnerabilityModelObject) throws Exception {
    LOG.info("VulnerabilityModelManagerRestServer editVulnerabilityModel:: begin");
    try {
      //retrieve the vulnerabilityModel in json format
      String vulnModelJson = vulnerabilityModelObject.getJsonModel();
      LOG.info("VulnerabilityModelManagerRestServer editVulnerabilityModel:: vulnModelJson = " + vulnModelJson.substring(0, (vulnModelJson.length() > 1000 ? 1000 : vulnModelJson.length())));
      //retrieve the vulnerabilityModel model identifier
      String identifier = vulnerabilityModelObject.getObjectIdentifier();
      LOG.info("VulnerabilityModelManagerRestServer editVulnerabilityModel:: identifier = " + identifier);

      //VulnerabilityModel data validation and updateQuestionnaireJSON time
      VulnerabilityModelSerializerDeserializer vmsd = new VulnerabilityModelSerializerDeserializer();
      VulnerabilityModel vm = vmsd.getVMFromJSONString(vulnModelJson);
      LOG.info("VulnerabilityModelManagerRestServer editVulnerabilityModel:: vulnModelJson = " + vm.getVulnerabilities().size());
      DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm");
      Date now = new Date();
      vm.setUpdateTime(df.format(now));
      vulnModelJson = vmsd.getJSONStringFromVM(vm);

      // updateQuestionnaireJSON the vulnerability model
      vulnerabilityModelInput.editVulnerabilityModel(vulnModelJson, identifier);
    } catch (Exception e) {
      LOG.error("VulnerabilityModelManagerRestServer editVulnerabilityModel " + e.getMessage());
      throw new Exception("COMMAND_EXCEPTION", e);
    }
  }

  @Override
  public ModelObject loadVulnerabilityModel(GenericFilter filter) throws Exception {
    LOG.info("VulnerabilityModelManagerRestServer loadVulnerabilityModel:: begin");
    try {
      //return the vulnerability model in json format that matches the filters in input
      return vulnerabilityModelInput.loadVulnerabilityModel(filter);
    } catch (Exception e) {
      LOG.error("VulnerabilityModelManagerRestServer loadVulnerabilityModel " + e.getMessage());
      throw new Exception("COMMAND_EXCEPTION", e);
    }
  }

  @Override
  public String loadVulnerabilityRepository(GenericFilter filter) throws Exception {
    LOG.info("VulnerabilityModelManagerRestServer loadVulnerabilityRepository:: begin");
    LOG.info("loadVulnerabilityRepository " + filter.getFilterValue(GenericFilterEnum.FULL));

    try {
      //return the vulnerability model in json format that matches the filters in input
      String result = vulnerabilityModelInput.loadVulnerabilityRepository(filter);
      return result;
    } catch (Exception e) {
      LOG.error("VulnerabilityModelManagerRestServer loadVulnerabilityRepository " + e.getMessage());
      throw new Exception("COMMAND_EXCEPTION", e);
    }
  }

  @Override
  public void updateVulnerabilityRepository(String catalogue) throws Exception {
    LOG.info("VulnerabilityModelManagerRestServer updateVulnerabilityRepository:: begin");
    LOG.info("updateVulnerabilityRepository " + catalogue);

    try {
      VulnerabilitySourceEnum source;
      if (catalogue.equals("MEHARI")) {
        source = VulnerabilitySourceEnum.MEHARI;
      } else if (catalogue.equals("CWE")) {
        source = VulnerabilitySourceEnum.CVE;
      } else {
        LOG.error("updateVulnerabilityRepository - catalogue not supported " + catalogue);
        throw new Exception("COMMAND_EXCEPTION");
      }

      vulnerabilityImportInput.importVulnerabilities(source);

      // get the RISK SCENARIO REFERENCE
      LOG.info("updateVulnerabilityRepository - updateQuestionnaireJSON Risk Scenario References");
      ArrayList<RiskScenarioReference> rsr = riskModelInput.getRiskScenarioReference();
      //updateQuestionnaireJSON risk scenario reference in order to link the new vulnerability catalogue
      riskModelInput.updateScenarioRepository(rsr);
    } catch (Exception e) {
      LOG.error("VulnerabilityModelManagerRestServer updateVulnerabilityRepository " + e.getMessage());
      throw new Exception("COMMAND_EXCEPTION", e);
    }
  }

  @Override
  public String createVulnerabilityReference(Vulnerability vulnerability) throws Exception {

    try {
      return vulnerabilityModelInput.createVulnerability(vulnerability);
    } catch (Exception e) {
      LOG.error("VulnerabilityModelManagerRestServer createVulnerabilityRepository " + e.getMessage());
      throw new Exception("COMMAND_EXCEPTION", e);
    }
  }

  @Override
  public void editVulnerabilityReference(Vulnerability vulnerability) throws Exception {
    try {
      vulnerabilityModelInput.editVulnerability(vulnerability);
    } catch (Exception e) {
      LOG.error("VulnerabilityModelManagerRestServer updateVulnerabilityRepository " + e.getMessage());
      throw new Exception("COMMAND_EXCEPTION", e);
    }
  }

  @Override
  public void deleteVulnerabilityReference(List<String> identifier) throws Exception {
    try {
      vulnerabilityModelInput.deleteVulnerability(identifier);
    } catch (Exception e) {
      LOG.error("VulnerabilityModelManagerRestServer deleteVulnerabilityRepository " + e.getMessage());
      throw new Exception("COMMAND_EXCEPTION", e);
    }
  }

  public VulnerabilityModelManagerInputInterface getVulnerabilityModelInput() {
    return vulnerabilityModelInput;
  }

  public void setVulnerabilityModelInput(VulnerabilityModelManagerInputInterface vulnerabilityModelInput) {
    this.vulnerabilityModelInput = vulnerabilityModelInput;
  }

  public VulnerabilityImportManagerInputInterface getVulnerabilityImportInput() {
    return vulnerabilityImportInput;
  }

  public void setVulnerabilityImportInput(VulnerabilityImportManagerInputInterface vulnerabilityImportInput) {
    this.vulnerabilityImportInput = vulnerabilityImportInput;
  }

  public RiskModelManagerInputInterface getRiskModelInput() {
    return riskModelInput;
  }

  public void setRiskModelInput(RiskModelManagerInputInterface riskModelInput) {
    this.riskModelInput = riskModelInput;
  }

}
