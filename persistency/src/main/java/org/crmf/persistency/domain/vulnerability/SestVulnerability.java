/* --------------------------------------------------------------------------------------------------------------------
// Copyright file="SestVulnerability.java"
//  © Copyright European Space Agency, 2018-2020
//
//  Author: Software developed by RHEA System S.A.
// 
//  This file is subject to the terms and conditions defined in file 'LICENSE.txt', which is part of this source code package. 
//  No part of the package, including this file, may be copied, modified, propagated, or distributed 
//  except according to the terms contained in the file ‘LICENSE.txt’.
// --------------------------------------------------------------------------------------------------------------------
*/

package org.crmf.persistency.domain.vulnerability;

import org.crmf.model.riskassessment.PhaseEnum;
import org.crmf.model.riskassessmentelements.GeneralScore;
import org.crmf.model.riskassessmentelements.ScoreEnum;
import org.crmf.model.riskassessmentelements.Vulnerability;
import org.crmf.model.riskassessmentelements.VulnerabilityExploitabilityEnum;
import org.crmf.model.riskassessmentelements.VulnerabilityScoreEnum;
import org.crmf.model.riskassessmentelements.VulnerabilitySourceEnum;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

public class SestVulnerability {

  public static final String DD_MM_YYYY_HH_MM = "dd/MM/yyyy HH:mm";

  public SestVulnerability() {
    secondaryAssetCategory = new ArrayList<>();
  }

  private static final Logger LOG = LoggerFactory.getLogger(SestVulnerability.class.getName());

  private Integer id;
  private String sestobjId;
  private String scoringType;
  private String score;
  private String exploitability;
  private String phase;
  private String name;
  private Date updateTime;
  private String catalogueId;
  private String catalogue;
  private String damage;
  private ArrayList<String> secondaryAssetCategory;
  private String vulnerabilityJson;

  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public String getSestobjId() {
    return sestobjId;
  }

  public void setSestobjId(String sestobjId) {
    this.sestobjId = sestobjId;
  }

  public String getVulnerabilityJson() {
    return vulnerabilityJson;
  }

  public void setVulnerabilityJson(String vulnerabilityJson) {
    this.vulnerabilityJson = vulnerabilityJson;
  }

  public String getScoringType() {
    return scoringType;
  }

  public void setScoringType(String scoringType) {
    this.scoringType = scoringType;
  }

  public String getScore() {
    return score;
  }

  public void setScore(String score) {
    this.score = score;
  }

  public String getExploitability() {
    return exploitability;
  }

  public void setExploitability(String exploitability) {
    this.exploitability = exploitability;
  }

  public String getPhase() {
    return phase;
  }

  public void setPhase(String phase) {
    this.phase = phase;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Date getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(Date updateTime) {
    this.updateTime = updateTime;
  }

  public String getCatalogueId() {
    return catalogueId;
  }

  public void setCatalogueId(String catalogueId) {
    this.catalogueId = catalogueId;
  }

  public String getCatalogue() {
    return catalogue;
  }

  public void setCatalogue(String catalogue) {
    this.catalogue = catalogue;
  }

  public String getDamage() {
    return damage;
  }

  public void setDamage(String damage) {
    this.damage = damage;
  }

  public ArrayList<String> getSecondaryAssetCategory() {
    return secondaryAssetCategory;
  }

  public void setSecondaryAssetCategory(ArrayList<String> secondaryAssetCategory) {
    this.secondaryAssetCategory = secondaryAssetCategory;
  }

  public Vulnerability convertToModel() {

    Vulnerability vulnerability = new Vulnerability();
    vulnerability.setDescription(this.damage);
    vulnerability.setPhase(PhaseEnum.valueOf(this.phase));
    vulnerability.setName(this.name);
    vulnerability.setCatalogueId(this.getCatalogueId());
    vulnerability.setCatalogue(VulnerabilitySourceEnum.valueOf(this.catalogue));
    vulnerability.setIdentifier(this.sestobjId);

    GeneralScore score = new GeneralScore();
    score.setScore(VulnerabilityScoreEnum.valueOf(this.score));
    score.setScoringType(ScoreEnum.valueOf(getScoringType()));
    score.setExploitability(VulnerabilityExploitabilityEnum.valueOf(this.exploitability));
    vulnerability.setScore(score);

    DateFormat df = new SimpleDateFormat(DD_MM_YYYY_HH_MM);
    String vulnerabilityDate = df.format(this.updateTime);
    vulnerability.setLastUpdate(vulnerabilityDate);

    this.setName(vulnerability.getName());
    this.setCatalogueId(vulnerability.getCatalogueId());
    this.setCatalogue(vulnerability.getCatalogue().name());
    if (vulnerability.getIdentifier() != null) {
      this.setSestobjId(vulnerability.getIdentifier());
    }
    return vulnerability;
  }

  public void convertFromModel(Vulnerability vulnerability) {

    this.setDamage(vulnerability.getDescription());
    this.setName(vulnerability.getName());
    this.setCatalogueId(vulnerability.getCatalogueId());
    this.setScore(vulnerability.getScore().getScore().name());
    this.setScoringType(vulnerability.getScore().getScoringType().name());
    this.setExploitability(vulnerability.getScore().getExploitability().name());
    this.setPhase(vulnerability.getPhase().name());
    this.setCatalogue(vulnerability.getCatalogue().name());
    if (vulnerability.getIdentifier() != null) {
      this.setSestobjId(vulnerability.getIdentifier());
    }
    try {
      DateFormat df = new SimpleDateFormat(DD_MM_YYYY_HH_MM);
      Date vulnerabilityDate = vulnerability.getLastUpdate() != null ? df.parse(vulnerability.getLastUpdate()) : new Date();
      this.setUpdateTime(vulnerabilityDate);
    } catch (ParseException pe) {
      LOG.info("Unable to parse date " + vulnerability.getLastUpdate());
    }
  }
}



