<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE mapper PUBLIC '-//mybatis.org//DTD Mapper 3.0//EN'
        'http://mybatis.org/dtd/mybatis-3-mapper.dtd'>
<mapper namespace='org.crmf.persistency.mapper.vulnerability.VulnerabilityMapper'>
    <resultMap type='SestVulnerabilityModel' id='SestVulnerabilityModel'>
        <result property='sestobjId' column='SESTOBJ_ID'/>
        <result property='vulnerabilityModelJson' column='VULNERABILITY_MODEL_JSON'/>
    </resultMap>
    <resultMap type='SestVulnerability' id='SestVulnerability'>
        <result property='sestobjId' column='SESTOBJ_ID'/>
        <result property='vulnerabilityJson' column='VULNERABILITY_JSON'/>
        <result property='damage' column='DAMAGE'/>
        <result property='catalogueId' column='CATALOGUE_ID'/>
    </resultMap>

    <insert id='insert' parameterType='SestVulnerabilityModel' useGeneratedKeys='true'
            keyProperty='id' keyColumn='ID'>
		INSERT INTO VULNERABILITY_MODEL(SESTOBJ_ID, VULNERABILITY_MODEL_JSON)
		VALUES (#{sestobjId}, #{vulnerabilityModelJson})
	</insert>

    <update id='update' parameterType='map'>
		UPDATE VULNERABILITY_MODEL
		SET
		VULNERABILITY_MODEL_JSON = #{vulnerabilityModelJson}
		WHERE SESTOBJ_ID = #{sestobjId}
	</update>

    <select id='getByIdentifier' parameterType='String' resultMap='SestVulnerabilityModel'>
		SELECT *
		FROM VULNERABILITY_MODEL 
		WHERE SESTOBJ_ID = '${value}'
	</select>

    <select id='getById' parameterType='int' resultMap='SestVulnerabilityModel'>
		SELECT *
		FROM VULNERABILITY_MODEL
		WHERE ID = '${value}'
	</select>

    <select id='getVulnerabilityRepository' resultMap='SestVulnerability'
            parameterType='String'>
        SELECT * FROM VULNERABILITY_REFERENCE
        <if test="catalogue != null and catalogue != '' ">
            WHERE CATALOGUE = '${catalogue}'
        </if>
    </select>

    <insert id='insertVulnerabilityRepository' parameterType='SestVulnerability' useGeneratedKeys='true'
            keyProperty='id' keyColumn='ID'>
		INSERT INTO VULNERABILITY_REFERENCE(CATALOGUE, CATALOGUE_ID, UPDATE_TIME, NAME, DAMAGE, PHASE, EXPLOITABILITY, SCORE, SCORING_TYPE,VULNERABILITY_JSON, SESTOBJ_ID)
		VALUES (#{catalogue}, #{catalogueId}, #{updateTime}, #{name}, #{damage}, #{phase}, #{exploitability}, #{score}, #{scoringType}, #{vulnerabilityJson}, #{sestobjId})
	</insert>

    <insert id='insertVulnerabilityAssetRepository' parameterType='String'>
		INSERT INTO VULNERABILITY_ASSET_REFERENCE(SECONDARY_ASSET_CATEGORY, SESTOBJ_ID)
		VALUES (#{secondaryAssetCategory}, #{sestobjId})
	</insert>

    <delete id='deleteVulnerabilityAssetRepository' parameterType='String'>
		DELETE FROM VULNERABILITY_ASSET_REFERENCE WHERE SESTOBJ_ID = '${sestobjId}'
	</delete>

    <update id='updateVulnerabilityRepository' parameterType='SestVulnerability'>
		UPDATE VULNERABILITY_REFERENCE
		SET
		CATALOGUE = #{catalogue},
		CATALOGUE_ID = #{catalogueId},
		DAMAGE = #{damage},
		UPDATE_TIME = #{updateTime},
		NAME = #{name},
		PHASE = #{phase},
		EXPLOITABILITY = #{exploitability},
		SCORE = #{score},
		SCORING_TYPE = #{scoringType},
		VULNERABILITY_JSON = #{vulnerabilityJson}
		WHERE SESTOBJ_ID = #{sestobjId}
	</update>

    <select id='getVulnerabilityReferenceIdByCatalogueId' resultType='Integer'
            parameterType='String'>
		SELECT ID FROM VULNERABILITY_REFERENCE
			WHERE 
			CATALOGUE_ID = '${catalogueId}'
	</select>

	<select id='getVulnerabilityReferenceSestObjIdByCatalogueId' resultType='String'
			parameterType='String'>
		SELECT SESTOBJ_ID FROM VULNERABILITY_REFERENCE
			WHERE
			CATALOGUE_ID = '${catalogueId}'
	</select>

    <select id='getReferenceCatalogueById' parameterType='Integer'
            resultType='String'>
		SELECT CATALOGUE_ID
		FROM VULNERABILITY_REFERENCE
		WHERE 
		ID = '${value}' 
	</select>

    <delete id='deleteVulnerabilityReference' parameterType="java.util.List">
        DELETE FROM VULNERABILITY_REFERENCE WHERE SESTOBJ_ID IN
        <foreach item="item" index="index" collection="sestobjIds"
                 open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

</mapper>