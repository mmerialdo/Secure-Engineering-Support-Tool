/* --------------------------------------------------------------------------------------------------------------------
// Copyright file="AssAuditDefaultJSONTest.java"
//  © Copyright European Space Agency, 2018-2020
//
//  Author: Software developed by RHEA System S.A.
// 
//  This file is subject to the terms and conditions defined in file 'LICENSE.txt', which is part of this source code package. 
//  No part of the package, including this file, may be copied, modified, propagated, or distributed 
//  except according to the terms contained in the file ‘LICENSE.txt’.
// --------------------------------------------------------------------------------------------------------------------
*/

package org.crmf.persistency;

import org.crmf.model.riskassessment.PhaseEnum;
import org.crmf.model.riskassessmentelements.GeneralScore;
import org.crmf.model.riskassessmentelements.ScoreEnum;
import org.crmf.model.riskassessmentelements.Vulnerability;
import org.crmf.model.riskassessmentelements.VulnerabilityExploitabilityEnum;
import org.crmf.model.riskassessmentelements.VulnerabilityScoreEnum;
import org.crmf.model.riskassessmentelements.VulnerabilitySourceEnum;
import org.crmf.persistency.domain.vulnerability.SestVulnerabilityModel;
import org.crmf.persistency.mapper.vulnerability.VulnerabilityService;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mybatis.spring.boot.test.autoconfigure.MybatisTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.util.ArrayList;

@ExtendWith(SpringExtension.class)
@MybatisTest
@ContextConfiguration(classes=Application.class)
@ActiveProfiles("test")
public class VulnerabilityServiceTest {

  @Autowired
  VulnerabilityService vulnerabilityService;

  @Test
  public void insertVulnerability()  throws Exception {

    Vulnerability vulnerability = new Vulnerability();
    vulnerability.setCatalogue(VulnerabilitySourceEnum.MEHARI);
    vulnerability.setCatalogueId("abc.def");
    vulnerability.setName("abc.def");
    vulnerability.setPhase(PhaseEnum.Design);
    GeneralScore score =new GeneralScore();
    score.setScoringType(ScoreEnum.CWSS);
    score.setScore(VulnerabilityScoreEnum.HIGH);
    score.setExploitability(VulnerabilityExploitabilityEnum.HIGH);
    vulnerability.setScore(score);
    vulnerability.setDescription("abcname");

    vulnerabilityService.insertVulnerabilityReference(vulnerability);
    SestVulnerabilityModel model = vulnerabilityService.getVulnerabilityRepository(VulnerabilitySourceEnum.MEHARI.name());
    Assertions.assertNotNull(model);
    Assertions.assertEquals(1, model.convertToModel().getVulnerabilities().size());
  }

  @Test
  public void editVulnerability()  throws Exception{

    Vulnerability vulnerability = new Vulnerability();
    vulnerability.setCatalogue(VulnerabilitySourceEnum.MEHARI);
    vulnerability.setCatalogueId("abc.def");
    vulnerability.setName("abc.def");
    vulnerability.setPhase(PhaseEnum.Design);
    GeneralScore score =new GeneralScore();
    score.setScoringType(ScoreEnum.CWSS);
    score.setScore(VulnerabilityScoreEnum.HIGH);
    score.setExploitability(VulnerabilityExploitabilityEnum.HIGH);
    vulnerability.setScore(score);
    vulnerability.setDescription("abcname");

    String sestObjId = vulnerabilityService.insertVulnerabilityReference(vulnerability);
    vulnerability.setIdentifier(sestObjId);
    vulnerability.setDescription("aaaaaa");
    vulnerability.setPhase(PhaseEnum.Initial);
    vulnerabilityService.editVulnerabilityReference(vulnerability);
    SestVulnerabilityModel model = vulnerabilityService.getVulnerabilityRepository(VulnerabilitySourceEnum.MEHARI.name());
    Assertions.assertNotNull(model);
    Assertions.assertNotNull(model.convertToModel());
    Assertions.assertNotNull(model.convertToModel().getVulnerabilities().get(0));
    Assertions.assertEquals(1, model.convertToModel().getVulnerabilities().size());
    Assertions.assertEquals("aaaaaa", model.convertToModel().getVulnerabilities().get(0).getDescription());
    Assertions.assertEquals(PhaseEnum.Initial, model.convertToModel().getVulnerabilities().get(0).getPhase());
  }

  @Test
  public void deleteVulnerability()  throws Exception{

    Vulnerability vulnerability = new Vulnerability();
    vulnerability.setCatalogue(VulnerabilitySourceEnum.MEHARI);
    vulnerability.setCatalogueId("abc.def");
    vulnerability.setName("abc.def");
    vulnerability.setPhase(PhaseEnum.Design);
    GeneralScore score =new GeneralScore();
    score.setScoringType(ScoreEnum.CWSS);
    score.setScore(VulnerabilityScoreEnum.HIGH);
    score.setExploitability(VulnerabilityExploitabilityEnum.HIGH);
    vulnerability.setScore(score);
    vulnerability.setDescription("abcname");

    String sestObjId = vulnerabilityService.insertVulnerabilityReference(vulnerability);
    vulnerabilityService.deleteVulnerabilityReference(new ArrayList<String>() {{add(sestObjId);}});
    SestVulnerabilityModel model = vulnerabilityService.getVulnerabilityRepository(VulnerabilitySourceEnum.MEHARI.name());
    Assertions.assertNotNull(model);
    Assertions.assertNotNull(model.convertToModel());
    Assertions.assertEquals(0, model.convertToModel().getVulnerabilities().size());
  }
}
