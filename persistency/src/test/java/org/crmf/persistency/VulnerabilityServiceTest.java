/* --------------------------------------------------------------------------------------------------------------------
// Copyright file="AssAuditDefaultJSONTest.java"
//  © Copyright European Space Agency, 2018-2020
//
//  Author: Software developed by RHEA System S.A.
// 
//  This file is subject to the terms and conditions defined in file 'LICENSE.txt', which is part of this source code package. 
//  No part of the package, including this file, may be copied, modified, propagated, or distributed 
//  except according to the terms contained in the file ‘LICENSE.txt’.
// --------------------------------------------------------------------------------------------------------------------
*/

package org.crmf.persistency;

import org.crmf.model.riskassessment.PhaseEnum;
import org.crmf.model.riskassessmentelements.GeneralScore;
import org.crmf.model.riskassessmentelements.ScoreEnum;
import org.crmf.model.riskassessmentelements.Vulnerability;
import org.crmf.model.riskassessmentelements.VulnerabilityExploitabilityEnum;
import org.crmf.model.riskassessmentelements.VulnerabilityScore;
import org.crmf.model.riskassessmentelements.VulnerabilityScoreEnum;
import org.crmf.model.riskassessmentelements.VulnerabilitySourceEnum;
import org.crmf.persistency.domain.vulnerability.SestVulnerabilityModel;
import org.crmf.persistency.mapper.general.CleanDatabaseService;
import org.crmf.persistency.mapper.vulnerability.VulnerabilityService;
import org.crmf.persistency.session.PersistencySessionFactory;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class VulnerabilityServiceTest {

  PersistencySessionFactory sessionFactory;
  VulnerabilityService vulnerabilityService;

  @Before
  public void setUp() {

    sessionFactory = new PersistencySessionFactory();
    sessionFactory.createSessionFactory();

    vulnerabilityService = new VulnerabilityService();
    vulnerabilityService.setSessionFactory(sessionFactory);
  }

  @After
  public void tearDown(){

    CleanDatabaseService cleaner = new CleanDatabaseService();
    cleaner.setSessionFactory(sessionFactory);
    cleaner.delete();
  }

  @Test
  public void insertVulnerability()  throws Exception{

    Vulnerability vulnerability = new Vulnerability();
    vulnerability.setCatalogue(VulnerabilitySourceEnum.MEHARI);
    vulnerability.setCatalogueId("abc.def");
    vulnerability.setName("abc.def");
    vulnerability.setPhase(PhaseEnum.Design);
    GeneralScore score =new GeneralScore();
    score.setScoringType(ScoreEnum.CWSS);
    score.setScore(VulnerabilityScoreEnum.HIGH);
    score.setExploitability(VulnerabilityExploitabilityEnum.HIGH);
    vulnerability.setScore(score);
    vulnerability.setDescription("abcname");

    vulnerabilityService.insertVulnerabilityReference(vulnerability);
    SestVulnerabilityModel model = vulnerabilityService.getVulnerabilityRepository(VulnerabilitySourceEnum.MEHARI.name());
    assertNotNull(model);
    assertEquals(1, model.convertToModel().getVulnerabilities().size());
  }

  @Test
  public void editVulnerability()  throws Exception{

    Vulnerability vulnerability = new Vulnerability();
    vulnerability.setCatalogue(VulnerabilitySourceEnum.MEHARI);
    vulnerability.setCatalogueId("abc.def");
    vulnerability.setName("abc.def");
    vulnerability.setPhase(PhaseEnum.Design);
    GeneralScore score =new GeneralScore();
    score.setScoringType(ScoreEnum.CWSS);
    score.setScore(VulnerabilityScoreEnum.HIGH);
    score.setExploitability(VulnerabilityExploitabilityEnum.HIGH);
    vulnerability.setScore(score);
    vulnerability.setDescription("abcname");

    String sestObjId = vulnerabilityService.insertVulnerabilityReference(vulnerability);
    vulnerability.setIdentifier(sestObjId);
    vulnerability.setDescription("aaaaaa");
    vulnerability.setPhase(PhaseEnum.Initial);
    vulnerabilityService.editVulnerabilityReference(vulnerability);
    SestVulnerabilityModel model = vulnerabilityService.getVulnerabilityRepository(VulnerabilitySourceEnum.MEHARI.name());
    assertNotNull(model);
    assertNotNull(model.convertToModel());
    assertNotNull(model.convertToModel().getVulnerabilities().get(0));
    assertEquals(1, model.convertToModel().getVulnerabilities().size());
    assertEquals("aaaaaa", model.convertToModel().getVulnerabilities().get(0).getDescription());
    assertEquals(PhaseEnum.Initial, model.convertToModel().getVulnerabilities().get(0).getPhase());
  }

  @Test
  public void deleteVulnerability()  throws Exception{

    Vulnerability vulnerability = new Vulnerability();
    vulnerability.setCatalogue(VulnerabilitySourceEnum.MEHARI);
    vulnerability.setCatalogueId("abc.def");
    vulnerability.setName("abc.def");
    vulnerability.setPhase(PhaseEnum.Design);
    GeneralScore score =new GeneralScore();
    score.setScoringType(ScoreEnum.CWSS);
    score.setScore(VulnerabilityScoreEnum.HIGH);
    score.setExploitability(VulnerabilityExploitabilityEnum.HIGH);
    vulnerability.setScore(score);
    vulnerability.setDescription("abcname");

    String sestObjId = vulnerabilityService.insertVulnerabilityReference(vulnerability);
    vulnerabilityService.deleteVulnerabilityReference(new ArrayList<String>() {{add(sestObjId);}});
    SestVulnerabilityModel model = vulnerabilityService.getVulnerabilityRepository(VulnerabilitySourceEnum.MEHARI.name());
    assertNotNull(model);
    assertNotNull(model.convertToModel());
    System.out.println(model.convertToModel().getVulnerabilities().size());
    assertEquals(0, model.convertToModel().getVulnerabilities().size());
  }
}
