/* --------------------------------------------------------------------------------------------------------------------
// Copyright file="VulnerabilityModelManagerInput.java"
//  © Copyright European Space Agency, 2018-2020
//
//  Author: Software developed by RHEA System S.A.
// 
//  This file is subject to the terms and conditions defined in file 'LICENSE.txt', which is part of this source code package. 
//  No part of the package, including this file, may be copied, modified, propagated, or distributed 
//  except according to the terms contained in the file ‘LICENSE.txt’.
// --------------------------------------------------------------------------------------------------------------------
*/

package org.crmf.core.vulnerabilitymodel.manager;

import org.crmf.model.riskassessment.AssessmentProcedure;
import org.crmf.model.riskassessmentelements.Vulnerability;
import org.crmf.model.riskassessmentelements.VulnerabilitySourceEnum;
import org.crmf.model.utility.GenericFilter;
import org.crmf.model.utility.GenericFilterEnum;
import org.crmf.model.utility.ModelObject;
import org.crmf.model.utility.TaxonomyReferenceBuilder;
import org.crmf.persistency.mapper.general.SestObjService;
import org.crmf.persistency.mapper.general.SestObjServiceInterface;
import org.crmf.persistency.mapper.project.AssprocedureServiceInterface;
import org.crmf.persistency.mapper.vulnerability.VulnerabilityServiceInterface;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

//This class is called by the Proxy and manages the entrypoint for the business logic (including the interactions with the Persistency) related to the VulnerabilityModel
public class VulnerabilityModelManagerInput implements VulnerabilityModelManagerInputInterface {
  // the logger of VulnerabilityModelManagerInput class
  private static final Logger LOG = LoggerFactory.getLogger(VulnerabilityModelManagerInput.class.getName());
  // Vulnerability service variable of persistency component
  private VulnerabilityServiceInterface vulnerabilityService;
  // Procedure service variable of persistency component
  private AssprocedureServiceInterface assprocedureService;
  private SestObjServiceInterface sestObjService;

  @Override
  public void editVulnerabilityModel(String vulnerabilityModelJson, String vulnerabilityModelIdentifier) {
    LOG.info("editVulnerabilityModel with identifier: " + vulnerabilityModelIdentifier + " and Json" + vulnerabilityModelJson.substring(0, (vulnerabilityModelJson.length() > 1000 ? 1000 : vulnerabilityModelJson.length())));
    // updateQuestionnaireJSON the json vulnerability model whose identifier is the vulnerability model identifier in input
    vulnerabilityService.update(vulnerabilityModelJson, vulnerabilityModelIdentifier);

  }

  @Override
  public ModelObject loadVulnerabilityModel(GenericFilter filter) throws Exception {
    // get the procedure identifier passed in input
    String procedureIdentifier = filter.getFilterValue(GenericFilterEnum.PROCEDURE);
    LOG.info("loadVulnerabilityModel:: input procedure filter = " + procedureIdentifier);


    // if the value of procedure identifier is not null
    if (procedureIdentifier != null) {
      // retrieve the assessment procedure associated to the procedure identifier in input
      AssessmentProcedure procedure = assprocedureService.getByIdentifierFull(procedureIdentifier);

      //retrieve the vulnerability model identifier associated to the retrieved assessment procedure
      String sestobjId = procedure.getVulnerabilityModel().getIdentifier();

      // return the json vulnerability model associated to the vulnerability model identifier retrieved
      ModelObject modelObject = new ModelObject();
      modelObject.setJsonModel(vulnerabilityService.getByIdentifier(sestobjId).getVulnerabilityModelJson());
      modelObject.setObjectIdentifier(sestobjId);
      modelObject.setLockedBy(sestObjService.getByIdentifier(sestobjId).getLockedBy());
      return modelObject;
    } else {
      LOG.error("loadVulnerabilityModel:: Incorrect procedure identifier in input");
      throw new Exception("Incorrect procedure identifier in input");
    }

  }

  @Override
  public String loadVulnerabilityRepository(GenericFilter filter) {
    // This method load all vulnerabilities saved in the database, for a given Catalogue (MEHARI, CWE, etc..)
    String catalogue = filter.getFilterValue(GenericFilterEnum.METHODOLOGY);
    String fullString = filter.getFilterValue(GenericFilterEnum.FULL);
    LOG.info("loadVulnerabilityRepository " + filter.getFilterValue(GenericFilterEnum.METHODOLOGY));
    LOG.info("loadVulnerabilityRepository " + filter.getFilterValue(GenericFilterEnum.FULL));
    Boolean full = fullString != null? Boolean.valueOf(fullString) : false;

    return vulnerabilityService.getVulnerabilityRepository(catalogue).getVulnerabilityModelJson();
  }

  @Override
  public String createVulnerability(Vulnerability vulnerability) throws Exception {
    TaxonomyReferenceBuilder.vulnearbilityCheckAndFill(vulnerability);
    return vulnerabilityService.insertVulnerabilityReference(vulnerability);
  }

  @Override
  public void editVulnerability(Vulnerability vulnerability) throws Exception {
    TaxonomyReferenceBuilder.vulnearbilityCheckAndFill(vulnerability);
    vulnerabilityService.editVulnerabilityReference(vulnerability);
  }

  @Override
  public void deleteVulnerability(List<String> identifier) throws Exception {
    vulnerabilityService.deleteVulnerabilityReference(identifier);
  }

  public VulnerabilityServiceInterface getVulnerabilityService() {
    return vulnerabilityService;
  }

  public void setVulnerabilityService(VulnerabilityServiceInterface vulnerabilityService) {
    this.vulnerabilityService = vulnerabilityService;
  }

  public AssprocedureServiceInterface getAssprocedureService() {
    return assprocedureService;
  }

  public void setAssprocedureService(AssprocedureServiceInterface assprocedureService) {
    this.assprocedureService = assprocedureService;
  }

  public SestObjServiceInterface getSestObjService() {
    return sestObjService;
  }

  public void setSestObjService(SestObjServiceInterface sestObjService) {
    this.sestObjService = sestObjService;
  }
}
