pipeline {
  agent {
    dockerfile {
	  filename 'sources/Dockerfile'
	  
      registryUrl 'http://nexus-server.rheagroup.com:8443'

      registryCredentialsId 'nexus-developer'

      args '--add-host sonarqube-server.rheagroup.com:172.16.100.6 ' +
       '--add-host nexus-server.rheagroup.com:172.16.100.5 ' +
       '-v /var/lib/jenkins/.m2:/home/jenkins/.m2 -v /opt/shared_node_modules:/home/jenkins/.npm'
    }
  }

  /* Options  */
  options {
    timeout(time: 120, unit: 'MINUTES')
    skipStagesAfterUnstable() /* stops the pipeline after instability is recorded */
  }

  /* define environmental variables */
  environment {
    EMAIL_ADDR = "f.devecchis@rheagroup.com, g.mihalachi@rheagroup.com, a.narolski@rheagroup.com"
    PROJ_NAME = "SEST"
  }

  stages {
    stage('checkout') {
      steps {
        checkout scm
      }
    }

    stage('compile-test-package') {
      steps {
		sh 'chmod -R 755 sources'
		dir ('sources') {
		  sh './mvnw -Pjenkins clean install -DskipTests=true'
		}
      }
    }

    stage('owasp-dependency-check') {
      steps {
		dir ('sources') {
		  sh './mvnw org.owasp:dependency-check-maven:check'
		}
      }
    }
	
    stage('server-qa') {
      environment {
        SONAR_TOKEN = credentials('jenkins_sonarqube')
      }
      steps {
        withSonarQubeEnv('sonarqube') {
		dir ('sources') {
          sh './mvnw org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar' +
          ' -f pom.xml' +
          ' -Dsonar.projectKey=org.crmf:parent' +
          ' -Dsonar.language=java' +
          ' -Dsonar.tests=.' +
          ' -Dsonar.test.inclusions=**/*Test' +
          ' -Dsonar.coverage.exclusions=**/configuration/**,**/model/**,src/test/java/**,**/*Exception.java' +
          ' -Dsonar.issue.ignore.multicriteria=te' +
          ' -Dsonar.issue.ignore.multicriteria.te.ruleKey=squid:S00112' +
          ' -Dsonar.issue.ignore.multicriteria.te.resourceKey=**/*Test.java' +
          ' -Dsonar.issue.ignore.multicriteria=cp' +
          ' -Dsonar.issue.ignore.multicriteria.cp.ruleKey=squid:S00107' +
          ' -Dsonar.issue.ignore.multicriteria.cp.resourceKey=**/model/*.java' +
		  ' -Dsonar.host.url=http://172.16.100.6:9000' +
		  ' -Dsonar.login=$SONAR_TOKEN'
		  }
        }
      }
    }

    stage('client-qa') {
     environment {
        SONAR_TOKEN = credentials('jenkins_sonarqube')
     }
      steps {
        withSonarQubeEnv('sonarqube') {
		dir ('sources') {
            sh './mvnw org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar' +
             ' -f client/pom.xml' +
             ' -Dsonar.projectKey=org.crmf:client' +
             ' -Dsonar.language=ts' +
             ' -Dsonar.sources=src/app' +
             ' -Dsonar.exclusions=**theme/**,**/node_modules/**,**/*spec.ts,**/*.class.ts' +
             ' -Dsonar.coverage.exclusions=**theme/**,**/shared/gojs-extensions/**' +
             ' -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info' +
			 ' -Dsonar.host.url=http://172.16.100.6:9000' +
			 ' -Dsonar.login=$SONAR_TOKEN'
            }
        }
      }
    }

  /*  stage("server-qa-gate") {
      steps {
        script {
          timeout(time: 1, unit: 'HOURS') {
            def qg = waitForQualityGate()

            if (qg.status != 'OK') {
              error "Pipeline aborted due to quality gate failure: ${qg.status}"
            }
          }
        }
      }
	}

    stage("client-qa-gate") {
      steps {
        script {
          timeout(time: 1, unit: 'HOURS') {
            def qg = waitForQualityGate()

            if (qg.status != 'OK') {
              error "Pipeline aborted due to quality gate failure: ${qg.status}"
            }
          }
        }
      }
    } */
  }

  post {
    always {
      echo 'Pipeline finalized!'
      cleanWs()
    }
    success {
      echo 'Pipeline Succeeded!'
      // slackSend( color: '#00ff00', message: 'Build success: ' + env.BRANCH_NAME, channel: '#sest')
    }
    failure {
      echo 'Pipeline Failed!'
      // slackSend( color: '#ff0000', message: 'Build failed: ' + env.BRANCH_NAME, channel: '#sest')
    }
    unstable {
      echo 'Pipeline Unstable!'
      // slackSend( color: '#ffff00', message: 'Build unstable: ' + env.BRANCH_NAME, channel: '#sest')
    }
    changed {
      echo 'Pipeline Changed!'
    }
  } 
}
