/* --------------------------------------------------------------------------------------------------------------------
// Copyright file="VulnerabilityModelSerialize.java"
//  © Copyright European Space Agency, 2018-2020
//
//  Author: Software developed by RHEA System S.A.
// 
//  This file is subject to the terms and conditions defined in file 'LICENSE.txt', which is part of this source code package. 
//  No part of the package, including this file, may be copied, modified, propagated, or distributed 
//  except according to the terms contained in the file ‘LICENSE.txt’.
// --------------------------------------------------------------------------------------------------------------------
*/

package org.crmf.model;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.UUID;

import org.crmf.model.general.SESTObjectTypeEnum;
import org.crmf.model.riskassessment.PhaseEnum;
import org.crmf.model.riskassessment.VulnerabilityModel;
import org.crmf.model.riskassessmentelements.ApplicablePlatform;
import org.crmf.model.riskassessmentelements.CausalNatureEnum;
import org.crmf.model.riskassessmentelements.Consequence;
import org.crmf.model.riskassessmentelements.ElementTypeEnum;
import org.crmf.model.riskassessmentelements.GeneralScore;
import org.crmf.model.riskassessmentelements.ImpactEnum;
import org.crmf.model.riskassessmentelements.ScoreEnum;
import org.crmf.model.riskassessmentelements.SecondaryAssetCategoryEnum;
import org.crmf.model.riskassessmentelements.SecurityImpact;
import org.crmf.model.riskassessmentelements.SecurityImpactScopeEnum;
import org.crmf.model.riskassessmentelements.Vulnerability;
import org.crmf.model.riskassessmentelements.VulnerabilityExploitabilityEnum;
import org.crmf.model.riskassessmentelements.VulnerabilityScoreEnum;
import org.crmf.model.riskassessmentelements.VulnerabilitySourceEnum;
import org.crmf.model.utility.vulnerabilitymodel.VulnerabilityModelSerializerDeserializer;
import org.junit.Test;

public class VulnerabilityModelSerialize {

	@Test
	public void serializeVulnerabilityModel() throws IOException {
        VulnerabilityModelSerializerDeserializer vmSerDes = new VulnerabilityModelSerializerDeserializer();
        ArrayList<SecondaryAssetCategoryEnum> assetcategory;
        
		VulnerabilityModel vm = new VulnerabilityModel();
		UUID uuid = UUID.randomUUID();
		vm.setIdentifier(uuid.toString());
		
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm");
		Date now = new Date();
		vm.setCreationTime(df.format(now));
		vm.setUpdateTime(df.format(now));
		vm.setObjType(SESTObjectTypeEnum.VulnerabilityModel);
		
		assetcategory = new ArrayList<SecondaryAssetCategoryEnum>();
		assetcategory.add(SecondaryAssetCategoryEnum.Software_Configuration);
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of alteration of software configurations (software and parameters)", "Cfl.alt", "Alteration", true, false, true, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of software failure (bug)", "Cfl.bug", "Failure", true, false, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of disclosure of a software file", "Cfl.dif", "Disclosure of software", false, true, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of erasure of software configurations", "Cfl.eff", "Erasure", true, false, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of denial to use (due to lack of license)", "Cfl.lic", "Unhautorized use", false, false, true, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of pollution of software configurations", "Cfl.pol", "Pollution", false, false, true, false));
		
		assetcategory = new ArrayList<SecondaryAssetCategoryEnum>();
		assetcategory.add(SecondaryAssetCategoryEnum.Service_Access_Mean);
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of user accounts to be blocked", "Cpt.blo", "Lock", true, false, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of loss of capability to connect to the service", "Cpt.dis", "Loss", true, false, false, false));
		
		assetcategory = new ArrayList<SecondaryAssetCategoryEnum>();
		assetcategory.add(SecondaryAssetCategoryEnum.Data_Access_Mean);
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of loss of means allowing to access data (physical or logical keys) ", "Cle.dis", "Loss", true, false, false, false));
		
		/*assetcategory = new ArrayList<SecondaryAssetCategoryEnum>();
		assetcategory.add(SecondaryAssetCategoryEnum.Personnel);
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of loss of means allowing to access data (physical or logical keys) ", "Cle.dis", "Loss", true, false, false, false));
		*/
		assetcategory = new ArrayList<SecondaryAssetCategoryEnum>();
		assetcategory.add(SecondaryAssetCategoryEnum.Hardware_Configuration);
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of alteration of hardware configurations (parameters)", "PCfl.alt", "Alteration", true, false, true, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of hardware failure (hardware bug)", "PCfl.bug", "Failure", true, false, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of erasure of hardware configurations", "PCfl.eff", "Erasure", true, false, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of pollution of hardware configurations", "PCfl.pol", "Pollution", false, false, true, false));
		
		assetcategory = new ArrayList<SecondaryAssetCategoryEnum>();
		assetcategory.add(SecondaryAssetCategoryEnum.Hardware);
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of destruction of equipment", "Eq.des", "Destruction", true, false, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of failure of equipment", "Eq.hs", "Failure", true, false, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of non operable equipment", "Eq.mo", "Not operable", true, false, false, false));
		
		assetcategory = new ArrayList<SecondaryAssetCategoryEnum>();
		assetcategory.add(SecondaryAssetCategoryEnum.Premise);
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of premises to be not accessible", "Loc.ina", "Unavailability", true, false, false, false));

		assetcategory = new ArrayList<SecondaryAssetCategoryEnum>();
		assetcategory.add(SecondaryAssetCategoryEnum.Auxiliary_Equipment);
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of unavailability of auxiliary means or equipments", "Ser.hs", "Unavailability", false, false, true, false));
		
		assetcategory = new ArrayList<SecondaryAssetCategoryEnum>();
		assetcategory.add(SecondaryAssetCategoryEnum.Software_Custom);
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of software failure (bug)", "Cus.bug", "Failure", true, false, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of disclosure of a software file", "Cus.dif", "Disclosure of software", false, true, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of denial to use (due to lack of license)", "Cus.lic", "Unhautorized use", false, false, true, false));
		
		assetcategory = new ArrayList<SecondaryAssetCategoryEnum>();
		assetcategory.add(SecondaryAssetCategoryEnum.Software_Off_the_Shelf);
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of software failure (bug)", "Off.bug", "Failure", true, false, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of disclosure of a software file", "Off.dif", "Disclosure of software", false, true, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of denial to use (due to lack of license)", "Off.lic", "Unhautorized use", false, false, true, false));
		
		assetcategory = new ArrayList<SecondaryAssetCategoryEnum>();
		assetcategory.add(SecondaryAssetCategoryEnum.Data_Message);
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of alteration of data in transit or messages", "Dtr.alt", "Alteration", false, false, true, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of duplication and disclosure of data in transit, messages, screens", "Dtr.div", "Disclosure", false, true, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of loss of data in transit or messages", "Dtr.per", "Loss", true, true, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of erasure of data in transit or messages", "Dtr.des", "Erasure", true, false, false, false));
		
		assetcategory = new ArrayList<SecondaryAssetCategoryEnum>();
		assetcategory.add(SecondaryAssetCategoryEnum.Data_File);
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of alteration of files containing data", "Fic.alt", "Alteration", false, false, true, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of duplication or diffusion (and disclosure) of a file containing data", "Fic.dif", "Disclosure", false, true, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of erasure of data files", "Fic.eff", "Erasure", true, false, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of pollution (slow evolution) of data  in a file", "Fic.pol", "Pollution", true, false, false, false));
		
		assetcategory = new ArrayList<SecondaryAssetCategoryEnum>();
		assetcategory.add(SecondaryAssetCategoryEnum.Electronic_Media);
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of destruction of media containing data/software", "Med.des", "Destruction", true, false, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of loss of media containing data/software", "Med.dis", "Loss", true, true, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of duplication and disclosure of media containing data", "Med.dup", "Duplication", true, true, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of exchange of media containing data/software", "Med.ech", "Exchange", true, true, true, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of unavailability of media containing data/software", "Med.ine", "Unavailability", true, false, false, false));
		
		assetcategory = new ArrayList<SecondaryAssetCategoryEnum>();
		assetcategory.add(SecondaryAssetCategoryEnum.Non_Electronic_Media);
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of destruction of media containing data", "PMed.des", "Destruction", true, false, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of loss of media containing data", "PMed.dis", "Loss", true, true, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of duplication and disclosure of media containing data", "PMed.dup", "Duplication", true, true, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of exchange of media containing data", "PMed.ech", "Exchange", true, true, false, false));
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility of unavailability of media containing data", "PMed.ine", "Unavailability", true, false, false, false));
		
		assetcategory = new ArrayList<SecondaryAssetCategoryEnum>();
		assetcategory.add(SecondaryAssetCategoryEnum.Policy);
		vm.getVulnerabilities().add(createMehariVulnerability(assetcategory, "Possibility that procedures observed be inefficient (towards laws, regulations or contractual commitments)", "Pro.inf", "Inefficiency", false, false, false, true));
		
		
		String jsonString = vmSerDes.getJSONStringFromVM(vm);
		
		FileWriter fw = new FileWriter(".//json/vulnerabilitymodel.json");
		BufferedWriter bw = new BufferedWriter(fw);
		bw.write(jsonString);
		bw.close();
		fw.close();
	}

	private Vulnerability createMehariVulnerability(ArrayList<SecondaryAssetCategoryEnum> assetCategories, String consequenceDescription, String catId, String description, boolean availability, boolean confidenciality, boolean integrity, boolean efficiency){
		
		Vulnerability vl = new Vulnerability();
		vl.setObjType(SESTObjectTypeEnum.VulnerabilityModel);
		vl.setPhase(PhaseEnum.Initial);
		
		UUID uuid = UUID.randomUUID();
		vl.setIdentifier(uuid.toString());
		vl.setAssessmentVulnerability(false);
		vl.setAuthor("author");
		vl.setCanBeSelected(true);
		vl.setAffectedAssetsCategories(assetCategories);
		vl.setCatalogue(VulnerabilitySourceEnum.MEHARI);
		vl.setCausalNature(CausalNatureEnum.Implicit);
		vl.setDescription(description);
		vl.setElementType(ElementTypeEnum.Element);
		vl.setName(catId);
		vl.setCatalogueId(catId);
		
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm");
		Date now = new Date();
		vl.setLastUpdate(df.format(now));
		
		vl.setRawText("rawText");
		
		GeneralScore score = new GeneralScore();
		score.setScore(VulnerabilityScoreEnum.HIGH);
		score.setScoringType(ScoreEnum.CUSTOM);
		score.setExploitability(VulnerabilityExploitabilityEnum.VERY_HIGH);
		score.setExploitabilityBasic(VulnerabilityExploitabilityEnum.VERY_HIGH);
		vl.setScore(score);
		
		ApplicablePlatform platform = createDefaultApplicablePlatform(); 
		vl.setApplicablePlatform(platform);
		
		Consequence consequence = new Consequence();
		consequence.setDescription(consequenceDescription);
		
		score.getConsequences().add(consequence);
		
		if(availability){
		SecurityImpact secImpact1 = new SecurityImpact();
		secImpact1.setScope(SecurityImpactScopeEnum.Availability);
		secImpact1.setImpact(ImpactEnum.CRITICAL);
		
		consequence.getSecurityImpacts().add(secImpact1);
		}
		
		if(confidenciality){
		SecurityImpact secImpact2 = new SecurityImpact();
		secImpact2.setScope(SecurityImpactScopeEnum.Confidentiality);
		secImpact2.setImpact(ImpactEnum.CRITICAL);
		
		consequence.getSecurityImpacts().add(secImpact2);
		}
		
		if(integrity){
			SecurityImpact secImpact2 = new SecurityImpact();
			secImpact2.setScope(SecurityImpactScopeEnum.Integrity);
			secImpact2.setImpact(ImpactEnum.CRITICAL);
			
			consequence.getSecurityImpacts().add(secImpact2);
			}
		
		if(efficiency){
			SecurityImpact secImpact2 = new SecurityImpact();
			secImpact2.setScope(SecurityImpactScopeEnum.Efficiency);
			secImpact2.setImpact(ImpactEnum.CRITICAL);
			
			consequence.getSecurityImpacts().add(secImpact2);
			}
		
		return vl;
	}
	
	private ApplicablePlatform createDefaultApplicablePlatform(){
		ApplicablePlatform p = new ApplicablePlatform();
		p.setArchitecturalParadigms("");
		p.setHardwareArchitectures("");
		p.setOperatingSystems("");
		p.setPlatformNotes("");
		p.setProducts("");
		p.setProgrammingLanguages("");
		p.setTechnologyClasses("");

		return p;
	}
}



