/* --------------------------------------------------------------------------------------------------------------------
// Copyright file="VulnerabilityScoreInstanceCreator.java"
//  © Copyright European Space Agency, 2018-2020
//
//  Author: Software developed by RHEA System S.A.
// 
//  This file is subject to the terms and conditions defined in file 'LICENSE.txt', which is part of this source code package. 
//  No part of the package, including this file, may be copied, modified, propagated, or distributed 
//  except according to the terms contained in the file ‘LICENSE.txt’.
// --------------------------------------------------------------------------------------------------------------------
*/

package org.crmf.model.utility.vulnerabilitymodel;

import java.lang.reflect.Type;
import java.util.ArrayList;

import org.crmf.model.riskassessmentelements.CVEScore;
import org.crmf.model.riskassessmentelements.CWEScore;
import org.crmf.model.riskassessmentelements.Consequence;
import org.crmf.model.riskassessmentelements.GeneralScore;
import org.crmf.model.riskassessmentelements.ScoreEnum;
import org.crmf.model.riskassessmentelements.VulnerabilityExploitabilityEnum;
import org.crmf.model.riskassessmentelements.VulnerabilityScore;
import org.crmf.model.riskassessmentelements.VulnerabilityScoreEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

//This class manages the deserialization of VulnerabilityScore classes
public class VulnerabilityScoreInstanceCreator implements JsonDeserializer<VulnerabilityScore>  {
	
	@Override
	public VulnerabilityScore deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
			throws JsonParseException {
		JsonObject jsonObject = json.getAsJsonObject();
		
		VulnerabilityScore score = new GeneralScore();
		
		if (jsonObject.has("scoringType")) {
			String scoringType = jsonObject.get("scoringType").getAsString();
			
			if (scoringType.equals("")) {
				score = new GeneralScore();
				score.setScoringType(ScoreEnum.Other);
			} 
			else if (scoringType.equals("CVSS")) {
				score = new CVEScore();
				score.setScoringType(ScoreEnum.CVSS);
			} 
			else if (scoringType.equals("CWSS")) {
				score = new CWEScore();
				score.setScoringType(ScoreEnum.CWSS);
			} 
			else if (scoringType.equals("Other")) {
				score = new GeneralScore();
				score.setScoringType(ScoreEnum.Other);
			}
			else if (scoringType.equals("RHEA")) {
				score = new GeneralScore();
				score.setScoringType(ScoreEnum.CUSTOM);
			}
		} 
		else {
			score = new GeneralScore();
			score.setScoringType(ScoreEnum.Other);
		}
		
		if (jsonObject.has("score")) {
			String scoreValue = jsonObject.get("score").getAsString();
			
			if (scoreValue.equals("")) {
				score.setScore(VulnerabilityScoreEnum.VERY_HIGH);
			} 
			else if (scoreValue.equals("VERY_LOW")) {
				score.setScore(VulnerabilityScoreEnum.VERY_LOW);
			} 
			else if (scoreValue.equals("LOW")) {
				score.setScore(VulnerabilityScoreEnum.LOW);
			} 
			else if (scoreValue.equals("MEDIUM")) {
				score.setScore(VulnerabilityScoreEnum.MEDIUM);
			}
			else if (scoreValue.equals("HIGH")) {
				score.setScore(VulnerabilityScoreEnum.HIGH);
			}
			else if (scoreValue.equals("VERY_HIGH")) {
				score.setScore(VulnerabilityScoreEnum.VERY_HIGH);
			}
		} 
		else {
			score.setScore(VulnerabilityScoreEnum.VERY_HIGH);
		}

		if (jsonObject.has("exploitability")) {
			String exploitability = jsonObject.get("exploitability").getAsString();
			
			if (exploitability.equals("")) {
				score.setExploitability(VulnerabilityExploitabilityEnum.VERY_HIGH);
			} 
			else if (exploitability.equals("VERY_LOW")) {
				score.setExploitability(VulnerabilityExploitabilityEnum.VERY_LOW);
			} 
			else if (exploitability.equals("LOW")) {
				score.setExploitability(VulnerabilityExploitabilityEnum.LOW);
			} 
			else if (exploitability.equals("MEDIUM")) {
				score.setExploitability(VulnerabilityExploitabilityEnum.MEDIUM);
			}
			else if (exploitability.equals("HIGH")) {
				score.setExploitability(VulnerabilityExploitabilityEnum.HIGH);
			}
			else if (exploitability.equals("VERY_HIGH")) {
				score.setExploitability(VulnerabilityExploitabilityEnum.VERY_HIGH);
			}
		} 
		else {
			score.setExploitability(VulnerabilityExploitabilityEnum.VERY_HIGH);
		}
	

		if(score.getScoringType() == ScoreEnum.Other || score.getScoringType() == ScoreEnum.CUSTOM){
			
			if (!jsonObject.get("exploitabilityBasic").isJsonNull()) {
				String exploitabilityBasic = jsonObject.get("exploitabilityBasic").getAsString();
				
				if (exploitabilityBasic.equals("")) {
					((GeneralScore) score).setExploitabilityBasic(VulnerabilityExploitabilityEnum.VERY_HIGH);
				} 
				else if (exploitabilityBasic.equals("VERY_LOW")) {
					((GeneralScore) score).setExploitabilityBasic(VulnerabilityExploitabilityEnum.VERY_LOW);
				} 
				else if (exploitabilityBasic.equals("LOW")) {
					((GeneralScore) score).setExploitabilityBasic(VulnerabilityExploitabilityEnum.LOW);
				} 
				else if (exploitabilityBasic.equals("MEDIUM")) {
					((GeneralScore) score).setExploitabilityBasic(VulnerabilityExploitabilityEnum.MEDIUM);
				}
				else if (exploitabilityBasic.equals("HIGH")) {
					((GeneralScore) score).setExploitabilityBasic(VulnerabilityExploitabilityEnum.HIGH);
				}
				else if (exploitabilityBasic.equals("VERY_HIGH")) {
					((GeneralScore) score).setExploitabilityBasic(VulnerabilityExploitabilityEnum.VERY_HIGH);
				}
			} 
			else {
				((GeneralScore) score).setExploitabilityBasic(VulnerabilityExploitabilityEnum.VERY_HIGH);
			}
			
			GsonBuilder gsonBuilder = new GsonBuilder();
			
			gsonBuilder.serializeNulls();
			Gson gson = gsonBuilder.create();
			
			JsonArray consequences = jsonObject.get("consequences").getAsJsonArray();
			ArrayList<Consequence> consequencesArray = new ArrayList<Consequence>();

			consequences.forEach(item -> {
				JsonElement obj = (JsonElement) item;
				
				Consequence consequence = gson.fromJson(obj, Consequence.class);
				consequencesArray.add(consequence);
			
			});
			
			((GeneralScore) score).setConsequences(consequencesArray);

		}
		

		return score;
		

		
	}

}

